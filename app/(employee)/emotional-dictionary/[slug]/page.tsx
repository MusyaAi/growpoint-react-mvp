'use client';

import { useEffect, useMemo, useState } from 'react';
import Link from 'next/link';
import type { EmotionRich } from '@/lib/ds/emotions';

// –ò–∫–æ–Ω–∫–∏ –≤–∫–ª–∞–¥–æ–∫
const icons: Record<string, string> = {
  –ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ: 'üåä',
  –°—É—Ç—å: 'üéØ',
  –¢—Ä–∏–≥–≥–µ—Ä—ã: '‚ö°Ô∏è',
  –ú—ã—Å–ª–∏: 'üß†',
  –¢–µ–ª–æ: 'üßò',
  –ü–æ–≤–µ–¥–µ–Ω–∏–µ: 'üö∂',
  –í–ª–∏—è–Ω–∏–µ: 'üåê',
  –ü–æ–¥–¥–µ—Ä–∂–∫–∞: '‚ù§Ô∏è',
  –ü—Ä–∞–∫—Ç–∏–∫–∞: 'üõ†Ô∏è',
};

// –ö–ª—é—á–∏ localStorage
const LSK_FAVORITES = 'pg:favorites';
const LSK_STUDIED  = 'pg:studied';

// –°–±–æ—Ä –≤–∫–ª–∞–¥–æ–∫ –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function buildTabs(e: EmotionRich | null) {
  if (!e) return [] as string[];
  const t: string[] = [];
  if (e.immersion?.length || e.media?.image || e.media?.audio) t.push('–ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ');
  if (e.definition) t.push('–°—É—Ç—å');
  if (e.triggers?.length) t.push('–¢—Ä–∏–≥–≥–µ—Ä—ã');
  if (e.autoThoughts?.length) t.push('–ú—ã—Å–ª–∏');
  if (e.somatic?.length) t.push('–¢–µ–ª–æ');
  if (e.behaviors?.length) t.push('–ü–æ–≤–µ–¥–µ–Ω–∏–µ');
  if (
    e.impact?.communication?.length ||
    e.impact?.leadership?.length ||
    e.impact?.selfPerception?.length
  )
    t.push('–í–ª–∏—è–Ω–∏–µ');
  if (e.selfSupport?.length) t.push('–ü–æ–¥–¥–µ—Ä–∂–∫–∞');
  if (e.microPractice?.length) t.push('–ü—Ä–∞–∫—Ç–∏–∫–∞');
  return t;
}

// helpers –¥–ª—è localStorage (–±–µ–∑ spread Set)
function loadSet(key: string): Set<string> {
  try {
    const raw = localStorage.getItem(key);
    const arr = raw ? (JSON.parse(raw) as string[]) : [];
    return new Set(arr);
  } catch {
    return new Set();
  }
}
function saveSet(key: string, s: Set<string>) {
  try {
    localStorage.setItem(key, JSON.stringify(Array.from(s)));
  } catch {}
}

export default function EmotionDetailsPage({ params }: { params: { slug: string } }) {
  const { slug } = params;

  const [data, setData] = useState<EmotionRich | null>(null);
  const [notFound, setNotFound] = useState(false);
  const [active, setActive] = useState<string>(''); // —Ç–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞
  const [fav, setFav] = useState(false);

  // modal note
  const [noteOpen, setNoteOpen] = useState(false);
  const [note, setNote] = useState('');

  // –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    let alive = true;
    setNotFound(false);
    setData(null);
    setActive('');
    fetch(`/api/emotions/${encodeURIComponent(slug)}`)
      .then((r) => (r.ok ? r.json() : null))
      .then((json) => {
        if (!alive) return;
        if (!json) {
          setNotFound(true);
          return;
        }
        const e = json as EmotionRich;
        setData(e);

        // –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—É—é
        const studied = loadSet(LSK_STUDIED);
        studied.add(e.slug);
        saveSet(LSK_STUDIED, studied);

        // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        const favs = loadSet(LSK_FAVORITES);
        setFav(favs.has(e.slug));
      })
      .catch(() => setNotFound(true));
    return () => {
      alive = false;
    };
  }, [slug]);

  // –≤–∫–ª–∞–¥–∫–∏
  const tabs = useMemo(() => buildTabs(data), [data]);
  useEffect(() => {
    if (!active && tabs.length) setActive(tabs[0]);
  }, [tabs, active]);

  // –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–µ–º–µ–π—Å—Ç–≤—É
  const familyCounts = useMemo(() => {
    if (!data) return { familyTotal: 0, familyStudied: 0 };
    // –ø—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: —Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–π –≤ —ç—Ç–æ–º —Å–µ–º–µ–π—Å—Ç–≤–µ —Å—Ä–µ–¥–∏ 33 –∫–∞—Ä—Ç–æ—á–µ–∫
    // —á—Ç–æ–±—ã –Ω–µ —Ç–∞—â–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ ‚Äî –±–µ—Ä–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É –∏–∑ slug-–æ–≤ studied
    const studied = loadSet(LSK_STUDIED);
    const studiedArr = Array.from(studied);
    const familyStudied = studiedArr.filter((s) => s !== data.slug && s.length > 0).length + 1;
    // –¥–ª—è MVP –≤—ã—Å—Ç–∞–≤–∏–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π familyTotal (–Ω–∞–ø—Ä–∏–º–µ—Ä 3 –≤ —Å–µ–º–µ–π—Å—Ç–≤–µ shame)
    const familyTotal = 3;
    return { familyTotal, familyStudied: Math.min(familyStudied, familyTotal) };
  }, [data]);

  function toggleFav() {
    if (!data) return;
    const set = loadSet(LSK_FAVORITES);
    if (set.has(data.slug)) {
      set.delete(data.slug);
      setFav(false);
    } else {
      set.add(data.slug);
      setFav(true);
    }
    saveSet(LSK_FAVORITES, set);
  }

  // –∑–∞–≥–ª—É—à–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (notFound) {
    return (
      <div className="mx-auto max-w-3xl px-4 py-12">
        <Link href="/emotional-dictionary" className="text-emerald-700 hover:underline">
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
        </Link>
        <h1 className="mt-4 text-2xl font-bold text-gray-900">–≠–º–æ—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
        <p className="mt-2 text-gray-600">–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.</p>
      </div>
    );
  }
  if (!data) {
    return (
      <div className="mx-auto max-w-3xl px-4 py-12">
        <div className="h-6 w-48 rounded bg-gray-100" />
        <div className="mt-2 h-5 w-80 rounded bg-gray-100" />
        <div className="mt-6 h-48 w-full rounded-2xl bg-gray-50 border border-gray-200" />
      </div>
    );
  }

  return (
    // full-bleed —Ñ–æ–Ω
    <div className="relative left-1/2 right-1/2 -mx-[50vw] w-screen bg-emerald-50">
      <div className="min-h-screen">
        {/* –®–∞–ø–∫–∞ */}
        <header className="mx-auto max-w-6xl px-4 pt-8">
          <nav className="text-sm text-emerald-700/80">
            <Link href="/emotional-dictionary" className="hover:underline">
              –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞
            </Link>
            <span className="mx-1">/</span>
            <span className="hover:underline">{data.family.toUpperCase()}</span>
            <span className="mx-1">/</span>
            <span className="text-gray-700">{data.title}</span>
          </nav>
          <div className="mt-3 flex items-center gap-4">
            <div className="text-5xl" aria-hidden>
              {data.emoji}
            </div>
            <div>
              <div
                className="text-[10px] uppercase tracking-wider font-semibold"
                style={{ color: data.color }}
              >
                –°–µ–º–µ–π—Å—Ç–≤–æ: {data.family.toUpperCase()}
              </div>
              <h1 className="text-3xl md:text-4xl font-extrabold tracking-tight text-gray-900">
                {data.title}
              </h1>
              {data.subtitle && <p className="mt-1 text-gray-600">{data.subtitle}</p>}
            </div>
          </div>
        </header>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <main className="mx-auto max-w-6xl px-4 pb-16 pt-8 grid grid-cols-1 lg:grid-cols-[1fr_320px] gap-8 items-start">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
          <div className="space-y-4">
            {/* –í–∫–ª–∞–¥–∫–∏ */}
            {tabs.length > 0 && (
              <div className="flex flex-wrap gap-2 text-sm">
                {tabs.map((tab) => (
                  <button
                    key={tab}
                    onClick={() => setActive(tab)}
                    className={`flex items-center gap-2 rounded-lg px-3 py-1.5 transition-all duration-200 ${
                      active === tab
                        ? 'bg-emerald-600 text-white shadow-md'
                        : 'bg-white text-gray-700 hover:bg-emerald-50 border border-emerald-100'
                    }`}
                  >
                    <span>{icons[tab] ?? '‚Ä¢'}</span>
                    <span>{tab}</span>
                  </button>
                ))}
              </div>
            )}

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
            <section className="transition-opacity duration-300 space-y-4">
              {active === '–ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ' && (
                <>
                  {/* 1) –ö–ê–†–¢–ò–ù–ö–ê ‚Äî –ö–í–ê–î–†–ê–¢/–ü–û –ü–û –®–ò–†–ò–ù–ï, –í–´–®–ï */}
                  <div className="rounded-2xl border border-emerald-100 bg-white p-4 shadow-sm">
                    {data.media?.image ? (
                      // eslint-disable-next-line @next/next/no-img-element
                      <img
                        src={data.media.image}
                        alt=""
                        className="w-full rounded-xl object-cover"
                        style={{
                          aspectRatio: '1 / 1', // –∫–≤–∞–¥—Ä–∞—Ç
                        }}
                      />
                    ) : (
                      <div className="rounded-xl bg-gradient-to-br from-emerald-100 to-white flex items-center justify-center text-emerald-700"
                           style={{ aspectRatio: '1 / 1' }}>
                        –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è (—Å–∫–æ—Ä–æ)
                      </div>
                    )}
                  </div>

                  {/* 2) –ù–ò–ñ–ï ‚Äî –ê–£–î–ò–û + –¢–ï–ö–°–¢ –ü–û–î –ù–ï–ô (–û–î–ù–ê –ö–û–õ–û–ù–ö–ê) */}
                  <div className="rounded-2xl border border-emerald-100 bg-white p-4 shadow-sm space-y-4">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">–ê—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ</h3>
                      <p className="mt-1 text-sm text-gray-500">
                        3‚Äì4 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ–∂–∏—Ç—å —á—É–≤—Å—Ç–≤–æ —Ç–µ–ª–µ—Å–Ω–æ.
                      </p>
                      {data.media?.audio ? (
                        <audio className="mt-3 w-full" controls preload="none">
                          <source src={data.media.audio} type="audio/mp4" />
                          <source src={data.media.audio} type="audio/x-m4a" />
                          –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                        </audio>
                      ) : (
                        <div className="mt-3 text-gray-400 text-sm">–ê—É–¥–∏–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è</div>
                      )}
                    </div>
                    {!!data.immersion?.length && (
                      <div className="text-gray-700 leading-relaxed space-y-3">
                        {data.immersion.map((p, i) => (
                          <p key={i}>{p}</p>
                        ))}
                      </div>
                    )}
                  </div>
                </>
              )}

              {active === '–°—É—Ç—å' && data.definition && (
                <div className="rounded-2xl border bg-white p-6 shadow-sm">
                  <h2 className="text-2xl font-bold text-gray-900">–°—É—Ç—å</h2>
                  <p className="mt-3 text-gray-700 leading-relaxed max-w-3xl">
                    {data.definition}
                  </p>
                </div>
              )}

              {active === '–¢—Ä–∏–≥–≥–µ—Ä—ã' && !!data.triggers?.length && (
                <div className="rounded-2xl border bg-white p-6 shadow-sm">
                  <h2 className="text-2xl font-bold text-gray-900">–¢–∏–ø–∏—á–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã</h2>
                  <ul className="mt-4 list-disc pl-5 text-gray-700 space-y-2 leading-relaxed">
                    {data.triggers.map((t, i) => (
                      <li key={i}>{t}</li>
                    ))}
                  </ul>
                </div>
              )}

              {active === '–ú—ã—Å–ª–∏' && !!data.autoThoughts?.length && (
                <div className="rounded-2xl border bg-white p-6 shadow-sm">
                  <h2 className="text-2xl font-bold text-gray-900">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º—ã—Å–ª–∏</h2>
                  <ul className="mt-4 list-disc pl-5 text-gray-700 space-y-2 leading-relaxed">
                    {data.autoThoughts.map((t, i) => (
                      <li key={i}>{t}</li>
                    ))}
                  </ul>
                </div>
              )}

              {active === '–¢–µ–ª–æ' && !!data.somatic?.length && (
                <div className="rounded-2xl border bg-white p-6 shadow-sm">
                  <h2 className="text-2xl font-bold text-gray-900">–¢–µ–ª–µ—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã</h2>
                  <ul className="mt-4 list-disc pl-5 text-gray-700 space-y-2 leading-relaxed">
                    {data.somatic.map((t, i) => (
                      <li key={i}>{t}</li>
                    ))}
                  </ul>
                </div>
              )}

              {active === '–ü–æ–≤–µ–¥–µ–Ω–∏–µ' && !!data.behaviors?.length && (
                <div className="rounded-2xl border bg-white p-6 shadow-sm">
                  <h2 className="text-2xl font-bold text-gray-900">–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</h2>
                  <ul className="mt-4 list-disc pl-5 text-gray-700 space-y-2 leading-relaxed">
                    {data.behaviors.map((t, i) => (
                      <li key={i}>{t}</li>
                    ))}
                  </ul>
                </div>
              )}

              {active === '–í–ª–∏—è–Ω–∏–µ' &&
                (data.impact?.communication?.length ||
                  data.impact?.leadership?.length ||
                  data.impact?.selfPerception?.length) && (
                  <div className="space-y-4">
                    <div className="rounded-2xl border bg-white p-5 shadow-sm">
                      <h3 className="flex items-center gap-3 text-lg font-semibold text-emerald-700">
                        <span className="text-2xl">üí¨</span>
                        <span>–û–±—â–µ–Ω–∏–µ</span>
                      </h3>
                      <ul className="mt-2 list-disc pl-10 text-gray-700 space-y-1">
                        {(data.impact?.communication ?? []).map((t, i) => (
                          <li key={i}>{t}</li>
                        ))}
                      </ul>
                    </div>
                    <div className="rounded-2xl border bg-white p-5 shadow-sm">
                      <h3 className="flex items-center gap-3 text-lg font-semibold text-emerald-700">
                        <span className="text-2xl">üìà</span>
                        <span>–õ–∏–¥–µ—Ä—Å—Ç–≤–æ/—Ä–∞–±–æ—Ç–∞</span>
                      </h3>
                      <ul className="mt-2 list-disc pl-10 text-gray-700 space-y-1">
                        {(data.impact?.leadership ?? []).map((t, i) => (
                          <li key={i}>{t}</li>
                        ))}
                      </ul>
                    </div>
                    <div className="rounded-2xl border bg-white p-5 shadow-sm">
                      <h3 className="flex items-center gap-3 text-lg font-semibold text-emerald-700">
                        <span className="text-2xl">üë§</span>
                        <span>–°–∞–º–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ</span>
                      </h3>
                      <ul className="mt-2 list-disc pl-10 text-gray-700 space-y-1">
                        {(data.impact?.selfPerception ?? []).map((t, i) => (
                          <li key={i}>{t}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                )}

              {active === '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' && !!data.selfSupport?.length && (
                <div className="rounded-2xl border bg-white p-6 shadow-sm">
                  <h2 className="text-2xl font-bold text-gray-900">–§—Ä–∞–∑—ã —Å–∞–º–æ–ø–æ–¥–¥–µ—Ä–∂–∫–∏</h2>
                  <ul className="mt-4 list-disc pl-5 text-gray-700 space-y-2 leading-relaxed">
                    {data.selfSupport.map((t, i) => (
                      <li key={i}>{t}</li>
                    ))}
                  </ul>
                </div>
              )}

              {active === '–ü—Ä–∞–∫—Ç–∏–∫–∞' && !!data.microPractice?.length && (
                <div className="rounded-2xl border bg-white p-6 shadow-sm">
                  <h2 className="text-2xl font-bold text-gray-900">–ú–∏–∫—Ä–æ–ø—Ä–∞–∫—Ç–∏–∫–∞</h2>
                  <ul className="mt-4 list-disc pl-5 text-gray-700 space-y-2 leading-relaxed">
                    {data.microPractice.map((t, i) => (
                      <li key={i}>{t}</li>
                    ))}
                  </ul>
                </div>
              )}
            </section>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
          <aside className="lg:sticky lg:top-6 h-max space-y-4">
            <div className="rounded-2xl border border-emerald-100 bg-white p-4 shadow-sm">
              <div className="text-sm font-semibold text-gray-900">–ë—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</div>
              <p className="mt-1 text-xs text-gray-500">–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ—Ü–∏–µ–π –≤ –º–æ–º–µ–Ω—Ç–µ.</p>
              <div className="mt-3 grid grid-cols-2 gap-3 text-sm">
                <button
                  onClick={toggleFav}
                  className="rounded-xl border bg-white p-3 text-center hover:bg-emerald-50 transition-colors"
                >
                  {fav ? '‚òÖ' : '‚òÜ'}
                  <span className="ml-1">{fav ? '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' : '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}</span>
                </button>
                <button
                  onClick={() => setNoteOpen(true)}
                  className="rounded-xl border bg-white p-3 text-center hover:bg-emerald-50 transition-colors"
                >
                  ‚úçÔ∏è<span className="ml-1">–ó–∞–º–µ—Ç–∫–∞</span>
                </button>
              </div>
            </div>

            <div className="rounded-2xl border-2 border-emerald-600 bg-white p-4 shadow-lg">
              <div className="text-sm font-semibold text-gray-900">–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–µ–º–µ–π—Å—Ç–≤—É</div>
              <p className="mt-1 text-xs text-gray-500">
                –ò–∑—É—á–µ–Ω–æ —ç–º–æ—Ü–∏–π: {familyCounts.familyStudied} / {familyCounts.familyTotal}
              </p>
              <div className="mt-2 h-2 w-full rounded-full bg-emerald-100">
                <div
                  className="h-2 rounded-full bg-emerald-600"
                  style={{
                    width: `${
                      (familyCounts.familyStudied / Math.max(1, familyCounts.familyTotal)) * 100
                    }%`,
                  }}
                />
              </div>
              <button className="mt-4 w-full rounded-xl bg-emerald-600 px-3 py-2.5 text-sm font-medium text-white hover:bg-emerald-700 transition-colors">
                –ú–∏–Ω–∏-–∫—É—Ä—Å (—Å–∫–æ—Ä–æ)
              </button>
            </div>
          </aside>
        </main>
      </div>

      {/* –ú–æ–¥–∞–ª–∫–∞ ¬´–ó–∞–º–µ—Ç–∫–∞¬ª */}
      {noteOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 p-4">
          <div className="w-full max-w-lg rounded-2xl bg-white p-5 shadow-xl">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">–ó–∞–º–µ—Ç–∫–∞ –∫ —ç–º–æ—Ü–∏–∏</h3>
              <button
                onClick={() => setNoteOpen(false)}
                className="rounded-full px-2 py-1 text-gray-500 hover:bg-gray-100"
                aria-label="–ó–∞–∫—Ä—ã—Ç—å"
              >
                ‚úï
              </button>
            </div>
            <textarea
              value={note}
              onChange={(e) => setNote(e.target.value)}
              rows={6}
              className="mt-3 w-full rounded-xl border border-gray-300 p-3 outline-none focus:ring-2 focus:ring-emerald-500"
              placeholder="–ß—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–æ—Å—å? –ß—Ç–æ –∑–∞–º–µ—Ç–∏–ª–∏ –≤ —Ç–µ–ª–µ/–º—ã—Å–ª—è—Ö/–ø–æ–≤–µ–¥–µ–Ω–∏–∏‚Ä¶"
            />
            <div className="mt-4 flex items-center justify-between gap-3">
              <Link
                href="/app/(employee)/journal"
                className="text-sm text-emerald-700 hover:underline"
              >
                –û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ ‚Üí
              </Link>
              <div className="flex gap-2">
                <button
                  onClick={() => setNoteOpen(false)}
                  className="rounded-xl border px-4 py-2 text-sm hover:bg-gray-50"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={() => {
                    if (!data || !note.trim()) {
                      setNoteOpen(false);
                      return;
                    }
                    // MVP: –ø—Ä–æ—Å—Ç–æ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ localStorage —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
                    const key = `pg:notes:${data.slug}`;
                    try {
                      const raw = localStorage.getItem(key);
                      const arr: string[] = raw ? JSON.parse(raw) : [];
                      arr.push(note.trim());
                      localStorage.setItem(key, JSON.stringify(arr));
                    } catch {}
                    setNote('');
                    setNoteOpen(false);
                  }}
                  className="rounded-xl bg-emerald-600 px-4 py-2 text-sm font-medium text-white hover:bg-emerald-700"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}