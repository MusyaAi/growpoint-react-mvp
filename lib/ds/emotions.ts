// lib/ds/emotions.ts

export type EmotionFamily =
  | 'joy' | 'sadness' | 'fear' | 'anger' | 'disgust'
  | 'surprise' | 'love' | 'shame' | 'guilt' | 'calm';

export const FAMILY_LABEL_RU: Record<EmotionFamily, string> = {
  joy: '—Ä–∞–¥–æ—Å—Ç—å',
  sadness: '–≥—Ä—É—Å—Ç—å',
  fear: '—Å—Ç—Ä–∞—Ö',
  anger: '–∑–ª–æ—Å—Ç—å',
  disgust: '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ',
  surprise: '—É–¥–∏–≤–ª–µ–Ω–∏–µ',
  love: '–ª—é–±–æ–≤—å',
  shame: '—Å—Ç—ã–¥',
  guilt: '–≤–∏–Ω–∞',
  calm: '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
};

const FAMILY_COLOR: Record<EmotionFamily, string> = {
  joy: '#22c55e',
  sadness: '#60a5fa',
  fear: '#f59e0b',
  anger: '#ef4444',
  disgust: '#10b981',
  surprise: '#a78bfa',
  love: '#f472b6',
  shame: '#fb7185',
  guilt: '#94a3b8',
  calm: '#14b8a6',
};

export type Emotion = {
  id: string;        // —Å—Ç–∞–±–∏–ª—å–Ω—ã–π id
  slug: string;      // —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π slug
  title: string;     // –Ω–∞–∑–≤–∞–Ω–∏–µ (RU)
  subtitle?: string; // –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  family: EmotionFamily;
  emoji: string;
  color: string;     // —Ü–≤–µ—Ç —Å–µ–º–µ–π—Å—Ç–≤–∞
  tags?: string[];   // –º–∏–Ω–∏-—Ç–µ–≥–∏/–º–∞—Ä–∫–µ—Ä—ã
};

function make(
  slug: string,
  title: string,
  family: EmotionFamily,
  emoji: string,
  subtitle?: string,
  tags: string[] = []
): Emotion {
  return {
    id: slug,
    slug,
    title,
    family,
    emoji,
    color: FAMILY_COLOR[family],
    subtitle,
    tags,
  };
}

// === 33 –∫–∞—Ä—Ç–æ—á–∫–∏ (RU) ===
export const emotions: Emotion[] = [
  // JOY
  make('radost', '–†–∞–¥–æ—Å—Ç—å', 'joy', 'üòä', '–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω–æ—Å—Ç–∏.', ['—Ç—ë–ø–ª–æ', '–ª—ë–≥–∫–æ—Å—Ç—å']),
  make('vostorg', '–í–æ—Å—Ç–æ—Ä–≥', 'joy', 'ü§©', '–ü–∏–∫ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–¥–æ—Å—Ç–∏.', ['—Å–∏–ª–∞', '—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ']),
  make('voodushevlenie', '–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ', 'joy', '‚ú®', '–ü—Ä–∏–ª–∏–≤ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —Å–∏–ª.', ['–∏–Ω—Ç–µ—Ä–µ—Å']),
  make('legkost', '–õ—ë–≥–∫–æ—Å—Ç—å', 'joy', 'üòå', '–°–≤–æ–±–æ–¥–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è.', ['–ø—Ä–æ—Å—Ç–æ—Ä']),

  // SADNESS
  make('grust', '–ì—Ä—É—Å—Ç—å', 'sadness', 'üòî', '–¢–∏—Ö–∞—è –ø–µ—á–∞–ª—å –æ –≤–∞–∂–Ω–æ–º.', ['–∑–∞–º–µ–¥–ª–µ–Ω–∏–µ']),
  make('toska', '–¢–æ—Å–∫–∞', 'sadness', 'ü•Ä', '–ü–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç–∞–∫—Ç–∞/—Å–º—ã—Å–ª–∞.', ['–æ–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ']),
  make('ogorchenie', '–û–≥–æ—Ä—á–µ–Ω–∏–µ', 'sadness', 'üòû', '–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–π.', ['—Å–ª—ë–∑—ã']),
  make('razocharovanie', '–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', 'sadness', 'üòï', '–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ¬´–∫–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å¬ª.', ['–ø–∞–¥–µ–Ω–∏–µ']),

  // FEAR
  make('trevoga', '–¢—Ä–µ–≤–æ–≥–∞', 'fear', 'üòü', '–§–æ–Ω –æ –≤–æ–∑–º–æ–∂–Ω–æ–π —É–≥—Ä–æ–∑–µ.', ['–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å']),
  make('opasenie', '–û–ø–∞—Å–µ–Ω–∏–µ', 'fear', 'üò¨', '–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∏—Å–∫–∞.', ['–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ']),
  make('ispug', '–ò—Å–ø—É–≥', 'fear', 'üò≥', '–†–µ–∑–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ.', ['–≤–∑–¥—Ä–æ–≥–Ω—É—Ç—å']),
  make('neuverennost', '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', 'fear', 'ü§î', '–°–æ–º–Ω–µ–Ω–∏–µ –≤ —Å–≤–æ–∏—Ö —à–∞–≥–∞—Ö.', ['–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å']),

  // ANGER
  make('zlost', '–ó–ª–æ—Å—Ç—å', 'anger', 'üò†', '–ì—Ä–∞–Ω–∏—Ü–∞/—Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω—ã.', ['—Ç–µ–ø–ª–æ', '–Ω–∞–ø–æ—Ä']),
  make('razdrazhenie', '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', 'anger', 'üò§', '–ú–µ–ª–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü.', ['—à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å']),
  make('yarost', '–Ø—Ä–æ—Å—Ç—å', 'anger', 'üò°', '–°–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∑–∞—â–∏—Ç—ã.', ['–≤–∑—Ä—ã–≤']),
  make('obida', '–û–±–∏–¥–∞', 'anger', 'üòí', '–ë–æ–ª—å –æ—Ç –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏.', ['–¥–∏—Å—Ç–∞–Ω—Ü–∏—è']),

  // DISGUST
  make('otvrashchenie', '–û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ', 'disgust', 'ü§¢', '–†–µ–∑–∫–æ–µ ¬´–Ω–µ —Ö–æ—á—É/–Ω–µ –º–æ—ë¬ª.', ['–æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ']),
  make('brezglivost', '–ë—Ä–µ–∑–≥–ª–∏–≤–æ—Å—Ç—å', 'disgust', 'ü§Æ', '–°–∏–ª—å–Ω–æ–µ –Ω–µ–ø—Ä–∏—è—Ç–∏–µ.', ['—É–¥–∞–ª–∏—Ç—å']),
  make('prezrenie', '–ü—Ä–µ–∑—Ä–µ–Ω–∏–µ', 'disgust', 'üòí', '–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–æ–≥–æ.', ['—Ö–æ–ª–æ–¥']),

  // SURPRISE
  make('udivlenie', '–£–¥–∏–≤–ª–µ–Ω–∏–µ', 'surprise', 'üòÆ', '–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/—Ä–∞–∑—Ä—ã–≤ –æ–∂–∏–¥–∞–Ω–∏–π.', ['—Å—Ç–æ–ø-–∫–∞–¥—Ä']),
  make('izumlenie', '–ò–∑—É–º–ª–µ–Ω–∏–µ', 'surprise', 'ü§Ø', '–°–∏–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏.', ['–≤–∞—É']),
  make('oshelomlenie', '–û—à–µ–ª–æ–º–ª–µ–Ω–∏–µ', 'surprise', 'üòµ', '–ü–æ—Ç–æ–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–µ–π.', ['—Å—Ç—É–ø–æ—Ä']),

  // LOVE
  make('lubov', '–õ—é–±–æ–≤—å', 'love', '‚ù§Ô∏è', '–¢—ë–ø–ª–∞—è —Å–≤—è–∑—å –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ.', ['—Å–æ–ø—Ä–∏—á–∞—Å—Ç–Ω–æ—Å—Ç—å']),
  make('nezhnost', '–ù–µ–∂–Ω–æ—Å—Ç—å', 'love', 'ü•∞', '–ú—è–≥–∫–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ/–∑–∞–±–æ—Ç–∞.', ['—Ç–µ–ø–ª–æ']),
  make('privyazannost', '–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å', 'love', 'ü§ù', '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å.', ['–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å']),
  make('doverie', '–î–æ–≤–µ—Ä–∏–µ', 'love', 'ü´∂', '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ.', ['–æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å']),
  make('blagodarnost', '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', 'love', 'üôè', '–ó–∞–º–µ—á–∞—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –≥–æ–≤–æ—Ä—é ¬´—Å–ø–∞—Å–∏–±–æ¬ª.', ['—â–µ–¥—Ä–æ—Å—Ç—å']),

  // SHAME
  make('styd', '–°—Ç—ã–¥', 'shame', 'üò≥', '–ß—É–≤—Å—Ç–≤–æ —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è/–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.', ['–∂–∞—Ä –≤ –ª–∏—Ü–µ', '—Å–∂–∞—Ç—å—Å—è']),
  make('nelovkost', '–ù–µ–ª–æ–≤–∫–æ—Å—Ç—å', 'shame', 'üòÖ', '¬´–ö–∞–∫-—Ç–æ –Ω–µ —Ç–∞–∫ —Å–¥–µ–ª–∞–ª/—Å–∫–∞–∑–∞–ª¬ª.', ['–∑–∞—Å—Ç–µ–Ω—á–∏–≤–æ—Å—Ç—å']),
  make('unizhenie', '–£–Ω–∏–∂–µ–Ω–∏–µ', 'shame', 'ü•≤', '–û–ø—ã—Ç –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ.', ['–±–æ–ª—å']),

  // GUILT
  make('vina', '–í–∏–Ω–∞', 'guilt', 'üòñ', '–Ø –ø—Ä–∏—á–∏–Ω–∏–ª –≤—Ä–µ–¥/–Ω–∞—Ä—É—à–∏–ª –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å.', ['–∏—Å–ø—Ä–∞–≤–∏—Ç—å']),
  make('raskayanie', '–†–∞—Å–∫–∞—è–Ω–∏–µ', 'guilt', 'üòî', '–•–æ—á—É –∏–∑–≤–∏–Ω–∏—Ç—å—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.', ['–º–∏—Ä–∏—Ç—å—Å—è']),
  make('sovestlivost', '–°–æ–≤–µ—Å—Ç–ª–∏–≤–æ—Å—Ç—å', 'guilt', 'ü´§', '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –Ω–æ—Ä–º–∞–º/—ç—Ç–∏–∫–µ.', ['–∑–∞–¥—É–º—á–∏–≤–æ—Å—Ç—å']),

  // CALM
  make('spokoystvie', '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', 'calm', 'üôÇ', '–†–æ–≤–Ω–æ—Å—Ç—å –∏ —Å–æ–±—Ä–∞–Ω–Ω–æ—Å—Ç—å.', ['–¥—ã—Ö–∞–Ω–∏–µ']),
  make('umirotvorenie', '–£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ', 'calm', 'üïäÔ∏è', '–ì–ª—É–±–∏–Ω–Ω—ã–π –ø–æ–∫–æ–π –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ.', ['—Ç–∏—à–∏–Ω–∞']),
  make('sderzhannost', '–°–¥–µ—Ä–∂–∞–Ω–Ω–æ—Å—Ç—å', 'calm', 'ü§ê', '–£–º–µ–Ω–∏–µ –¥–æ–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.', ['—Ä–∞–º–∫–∏']),
  make('prinyatie', '–ü—Ä–∏–Ω—è—Ç–∏–µ', 'calm', 'ü§≤', '–°–æ–≥–ª–∞—Å–∏–µ —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –∫–∞–∫ –æ–Ω–∞ –µ—Å—Ç—å.', ['–º—è–≥–∫–æ—Å—Ç—å']),
];

// --- helpers ---------------------------------------------------------------

export function familyLabelRu(f: EmotionFamily): string {
  return FAMILY_LABEL_RU[f];
}

export function listEmotions(params?: {
  search?: string;
  family?: EmotionFamily | '';
  limit?: number;
  offset?: number;
}): Emotion[] {
  const search = (params?.search || '').trim().toLowerCase();
  const family = (params?.family || '') as EmotionFamily | '';
  const limit  = Math.max(1, Math.min(100, params?.limit ?? 48));
  const offset = Math.max(0, params?.offset ?? 0);

  let items = emotions.slice();

  if (family) items = items.filter(i => i.family === family);
  if (search) {
    items = items.filter(i =>
      i.title.toLowerCase().includes(search) ||
      (i.subtitle || '').toLowerCase().includes(search) ||
      (i.tags || []).some(t => t.toLowerCase().includes(search))
    );
  }

  return items.slice(offset, offset + limit);
}

export function byIdOrSlug(slug: string): Emotion | undefined {
  return emotions.find(e => e.id === slug || e.slug === slug);
}
// ---- RICH glue -------------------------------------------------------------

import type { RichEmotionDoc } from './emotions.rich/types';
import { getRichBySlug } from './emotions.rich';

export type EmotionRich = Emotion & Partial<Omit<RichEmotionDoc, 'slug'>>;

export function getEmotionRich(slugOrId: string): EmotionRich | undefined {
  const base = byIdOrSlug(slugOrId);
  if (!base) return undefined;

  const rich = getRichBySlug(base.slug);
  if (!rich) return base as EmotionRich;

  const { slug: _drop, ...rest } = rich;
  return { ...base, ...rest } as EmotionRich;
}