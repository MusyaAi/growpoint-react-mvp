'use client';
import { useState } from "react";
import { useApp } from "@/components/store";

const EMOJIS = [
  { e:"–†–∞–¥–æ—Å—Ç—å", g:"üòä" }, { e:"–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", g:"üôÇ" }, { e:"–£—Å—Ç–∞–ª–æ—Å—Ç—å", g:"üò´" },
  { e:"–¢—Ä–µ–≤–æ–≥–∞", g:"üòü" }, { e:"–ó–ª–æ—Å—Ç—å", g:"üò†" }, { e:"–ì—Ä—É—Å—Ç—å", g:"üò¢" },
  { e:"–í–æ—Å—Ç–æ—Ä–≥", g:"ü•≥" }, { e:"–°–º—É—â–µ–Ω–∏–µ", g:"üò≥" },
];

export default function CheckinEmoji(){
  const { doCheckIn } = useApp();
  const [sel, setSel] = useState<string | null>(null);
  const [note, setNote] = useState("");
  const [flags, setFlags] = useState({ sleep:false, food:false, activity:false, rest:false });
  const [ok, setOk] = useState("");

  const toggle = (k: keyof typeof flags) => setFlags(s => ({...s, [k]: !s[k]}));

  const save = () => {
    if (!sel){ setOk("–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é"); return; }
    try {
      doCheckIn({ emotion: sel, note: note.trim() || undefined, flags });
      setOk("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ");
      setTimeout(()=>setOk(""), 1500);
      setNote("");
    } catch (e){ console.error(e); setOk("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"); }
  };

  return (
    <div className="bg-white border rounded-2xl p-4 shadow-sm">
      <div className="flex items-center justify-between mb-3">
        <h3 className="text-base font-semibold text-gray-900">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω</h3>
        <a href="/check-in" className="text-sm text-emerald-700 hover:underline">–ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º–∞</a>
      </div>

      <div className="grid grid-cols-8 gap-2 mb-3">
        {EMOJIS.map(({e,g})=>(
          <button
            key={e}
            type="button"
            onClick={()=>setSel(e)}
            className={`text-2xl leading-none p-1 rounded-lg transition ${sel===e ? 'ring-2 ring-emerald-300' : 'hover:bg-gray-50'}`}
            aria-label={e}
            title={e}
          >{g}</button>
        ))}
      </div>

      <input
        className="w-full h-10 border rounded-md px-3 text-sm mb-3"
        placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)‚Ä¶"
        value={note} onChange={(e)=>setNote(e.target.value)}
      />

      <div className="grid grid-cols-2 gap-2 mb-3 text-sm">
        <label className="flex items-center gap-2">
          <input type="checkbox" checked={flags.sleep} onChange={()=>toggle('sleep')} />
          <span>–í—ã—Å–ø–∞–ª—Å—è(–∞—Å—å)</span>
        </label>
        <label className="flex items-center gap-2">
          <input type="checkbox" checked={flags.food} onChange={()=>toggle('food')} />
          <span>–ü–æ–µ–ª(–∞) –≤–æ–≤—Ä–µ–º—è</span>
        </label>
        <label className="flex items-center gap-2">
          <input type="checkbox" checked={flags.activity} onChange={()=>toggle('activity')} />
          <span>–ë—ã–ª(–∞) –∞–∫—Ç–∏–≤–µ–Ω(–Ω–∞)</span>
        </label>
        <label className="flex items-center gap-2">
          <input type="checkbox" checked={flags.rest} onChange={()=>toggle('rest')} />
          <span>–£–¥–∞–ª–æ—Å—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å</span>
        </label>
      </div>

      <div className="flex items-center gap-3">
        <button onClick={save} className="px-4 py-2 rounded-lg bg-indigo-600 text-white text-sm hover:bg-indigo-700">
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>
        {ok && <span className={`text-sm ${ok==='–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'?'text-emerald-700': ok==='–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é'?'text-gray-500':'text-red-600'}`}>{ok}</span>}
      </div>
    </div>
  );
}
